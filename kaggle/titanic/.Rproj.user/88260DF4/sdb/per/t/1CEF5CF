{
    "collab_server" : "",
    "contents" : "# Load raw data\n\ntrain <- read.csv(\"train.csv\", header = TRUE)\ntest <- read.csv(\"test.csv\", header = TRUE)\n\n# Add a \"Survived\" varible to the test set to allow for combining data sets\n# data.frame creates new data frames / type ?data.frame in console for more help\n# add a varible called survived and make test 11 varibles like \"train\" set\n# rep = repeat the value of \"none\" 418 times (the # of rows in test) and \n# assign it to the \"Survived\" varible\n# then combine that varible with the \"test\" varible, leave blank to use entire data frame\ntest.Survived <- data.frame(Survived = rep(\"None\", nrow(test)), test[,])\n\n# Combine data sets\ndata.combined <- rbind(train,test.Survived)\n\n# Take a look at the string types in data set\nstr(data.combined)\n\ndata.combined$Survived <- as.factor(data.combined$Survived)\ndata.combined$Pclass <- as.factor(data.combined$Pclass)\n\n# Look at gross survival rates\ntable(data.combined$Survived)\n\n# Dist across classes\ntable(data.combined$Pclass)\n\n# Load up ggplot package to use for visualization\nlibrary(ggplot2)\n\n# Hypothesis: rich folks suvived at a higher rate\ntrain$Pclass <- as.factor(train$Pclass)\n\n# the lib you're using + the data frame + an x axis corresponding to pclass +\n# want a fill color (optional) + color code based on the Survived varible (converted to a factor) \n# + plot out a histogram + add an x  & y lab + add to the fill for Survived\nggplot(train, aes(x = Pclass, fill = factor(Survived))) +\n  geom_bar(width = 0.5) +\n  xlab(\"Pclass\") +\n  ylab(\"Total Count\") +\n  labs(fill = \"Survived\")\n\n# Examine first few names in trainig data set\nhead(as.character(train$Name))\n\n# How many unique names are there across the train and test set?\n#                          (grab name from d.c. data frame) 1309 values\n#           (convert them to a char str)\n#     find out how many of them are unique \n# then tell me\nlength(unique(as.character(data.combined$Name)))\n\n# Take a closer look at the 2 dups\n# First get dups names and store them as a vector\n#                                                                    (grab names from set)\n#                                                       (convert those to char str)\n#                                            (then use duplicated func on that to give rows of dups)\n#                        (from this set, grab the 'Name' but only the dups)    \n#            ( take all that and make it a char called 'dup.Names')\ndup.Names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), \"Name\"])\n\n# Next take a look at the records in the combined data set\n# Look at the dups and see if they are the same ppl or diff ppl with same name, by pulling out\n# data that match those records\n#                  (go thru all names in d.c. set)   \n#                                     (and if these names are a dup...)\n#            (which = pull that record out)\n#                                                    (return all)\ndata.combined[which(data.combined$Name %in% dup.Names),]\n\n# What is up with the Miss and Mr. thing?\nlibrary(stringr)\n\n# Any correlation with other varibles (e.g., 'sibsp')?\n#                                       (grab all names in d.c. set)\n#                           (and detect if 'Miss.' is in string)\n#                      (and if so, grab every single record in data set where 'Miss.' is in the name)\n#                                                                   (return all)\n# (store results in 'misses' varible)\nmisses <- data.combined[which(str_detect(data.combined$Name, \"Miss.\")),]\n# look at the first 5\nmisses[1:5,]\n\n# Let's look at Mrs. now\nmrses <- data.combined[which(str_detect(data.combined$Name, \"Mrs.\")),]\nmrses [1:5,]\n\n# Check to see if pattern cont with the males\nmales <- data.combined[which(train$Sex == \"male\"),]\nmales[1:5,]\n\n# Expand upon the r.ships b/t 'Survived' and 'Pclass' by adding the new 'Title' varible to the\n# data set and then Explore a potential 3D r.ship\n\n# Create a utility function to help with title extraction \nextractTitle <- function(Name){\n  Name <- as.character(Name) # Convert name into char\n  \n  # If it recognizes 'Miss' w/i a name, and length > 0, then return 'Miss'\n  if (length(grep(\"Miss.\", Name)) > 0) {\n    return(\"Miss.\")\n  } else if (length(grep(\"Master.\", Name)) > 0) {\n    return(\"Master.\")\n  } else if (length(grep(\"Mrs.\", Name)) > 0) {\n    return(\"Mrs.\")\n  } else if (length(grep(\"Mr.\", Name)) > 0) {\n    return(\"Mr.\")\n  } else {\n    return(\"Other\")\n  }\n}\n\nTitles <- NULL\n# Loop over all the values in d.c.and call the 'c' function, grab the name, pass it into the func\n# take w/e comes out of func and add it to titles\nfor (i in 1:nrow(data.combined)) {\n  Titles <- c(Titles,extractTitle(data.combined[i,\"Name\"]))\n}\n# Add in a new varible called title but conver to a factor first\ndata.combined$Title <- as.factor(Titles)\n\n# Since we only have survived lables for the train set, only use first 891 rows\nggplot(data.combined[1:891,], aes(x = Title, fill = Survived)) + \n  geom_bar(width = 0.5) +\n  facet_wrap(~Pclass) +\n  ggtitle(\"Pclass\") +\n  xlab(\"Title\") +\n  ylab(\"Total Count\") +\n  labs(fill = \"Survived\")\n\ndata.combined$title <- NULL\n\n# What's the dist of females to males across test and train?\ntable(data.combined$Sex)\n\n# Visualize the 3-way r.ship of sex, pclass, and survival, compare to title analysis\nggplot(data.combined[1:891,], aes(x = Sex, fill = Survived)) +\n  stat_count(width = 0.5) +\n  facet_wrap(~Pclass) + \n  ggtitle(\"Pclass\") +\n  xlab(\"Sex\") +\n  ylab(\"Total Count\") +\n  labs(fill = \"Survived\")\n\n# Look at age dist over entire set\nsummary(data.combined$Age)\nsummary(data.combined[1:891,\"Age\"])\n\n# To be thourough, look at Survival rates broken out by sex, class, & age\n# DNU this one, instead use next ggplot\nggplot(data.combined[1:891,], aes(x = Age, fill = Survived)) +\n  facet_wrap(~Sex + Pclass) + \n  geom_bar(width = 10) +\n  xlab(\"Age\") +\n  ylab(\"Total Count\")\n\nggplot(data.combined[1:891,], aes(x = Age, fill = Survived)) +\n  facet_wrap(~Sex + Pclass) +\n  geom_histogram(binwidth = 10) +\n  xlab(\"Age\") +\n  ylab(\"Total Count\")\n\n# Validate that \"Master\" is a good proxy for male children\nboys <- data.combined[which(data.combined$Title == \"Master.\"),]\ndata.combined[which(data.combined$Title == \"Master.\"),]\nsummary(boys$Age)\n\n# \"Miss\" is a lil more complicated, let's examine closer\nmisses <- data.combined[which(data.combined$Title == \"Miss.\"),]\nsummary(misses$Age)\n\nggplot(misses[misses$Survived != \"None\",], aes(x= Age, fill = Survived)) +\n  facet_wrap(~Pclass) +\n  geom_histogram(binwidth = 5) +\n  ggtitle(\"Age for 'Miss.' by Pclass\") +\n  xlab(\"Age\") +\n  ylab(\"Total Count\")\n\n# OK, it appears female kids have a differnt survival rate, could be a CANDIDATE\n# for FEATURE ENGINEERING later\nmisses.alone <- misses[which(misses$SibSp == 0 & misses$Parch == 0), ]\nsummary(misses.alone$Age)\nlength(which(misses.alone$Age <= 14.5))\n\n# Move on to the sibsp varible, summarize varible\nsummary(data.combined$SibSp)\n\n# Can we treat as a factor?\nlength(unique(data.combined$SibSp))\n\ndata.combined$SipSp <- as.factor(data.combined$SibSp)\n\n# We believe Title is predictive. \n# Visualize survival rates by sibsp, pclass, & title\nggplot(data.combined[1:891,], aes(x = SibSp, fill = Survived)) +\n  geom_histogram(binwidth = 1) +\n  facet_wrap(~Pclass + Title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"SibSp\") +\n  ylab(\"Total Count\") +\n  labs(fill = \"Survived\")\n\n# Treat 'Parch' variable as a factor and visualize\ndata.combined$Parch <- as.factor(data.combined$Parch)\nggplot(data.combined[1:891,], aes(x = Parch, fill = Survived)) +\n  geom_histogram(binwidth = 1) +\n  facet_wrap(~Pclass + Title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"ParCh\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n\nggplot(data.combined[1:891,], aes(x = Parch, fill = Survived)) +\n  geom_bar(width = 1) +\n  stat_count(width = 1) +\n  facet_wrap(~Pclass + Title) + \n  ggtitle(\"Pclass, Title\") +\n  xlab(\"ParCh\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n\n# Let's try to do some feature engineering. Let's create a \"family size\" feature\n# We are using test and train b/c we want int values and not the factors\ntemp.SibSp <- c(train$SibSp, test$SibSp)\ntemp.Parch <- c(train$Parch, test$Parch)\n\ndata.combined$Fam.Size <- as.factor(temp.SibSp + temp.Parch + 1)\nFamSize <- NULL\ndata.combined$FamSize<- NULL\n\n# Visualize it to see if it is predictive\nggplot(data.combined[1:891,], aes(x = Fam.Size, fill = Survived)) +\n  geom_bar(width = 1) +\n  stat_count(width = 1) +\n  facet_wrap(~Pclass + Title) + \n  ggtitle(\"Pclass, Title\") +\n  xlab(\"Fam.Size\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n\n#################PREVIOUS WORK BEFORE EXIT############################\n\n# REMEMBER TO SET WORKING DIRECTORY\n\n# Take a look at ticket variable\nstr(data.combined$Ticket)\n\n# Turn tic varible into a string\n# Display first 20\ndata.combined$Ticket <- as.character(data.combined$Ticket)\ndata.combined$Ticket[1:20]\n\n# There's no immediately apparent structure in the data, let's see if we can find some.\n# We'll start with taking a look at just the first char for each\n#                                                     (grab part of the string, the 1st char)\n#                    (substr call is wrapped in 'ifelse')\n#                       (check to see if the 1st char in Ticket is an empty string)\n#                       (& if it finds empty string, put a space in its place)\n#                       (otherwise, give results of 1st char in string)\nticket.first.char <- ifelse(data.combined$Ticket == \"\", \" \", substr(data.combined$Ticket, 1, 1))\n\n# Give me all the 1st chars in from all the tics :)\nunique(ticket.first.char)\n\n# Now make a factor out of variable for analysis and viz purposes\ndata.combined$ticket.first.char <- as.factor(ticket.first.char)\n\n# First, a hi-lvl plot of the data\nggplot(data.combined[1:891,], aes(x= ticket.first.char, fill = Survived)) +\n  geom_bar() +\n  ggtitle(\"Survivability by ticket.first.char\") + \n  xlab(\"ticket.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0,350) +\n  labs(fill = \"Survived\")\n\n# Tics seem interesting, let's dog in some more\nggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +\n  geom_bar() +\n  ggtitle(\"Pclass\") +\n  facet_wrap(~Pclass) +\n  xlab(\"ticket.first.char\") + #quotes for labels plz#\n  ylab(\"Total Count\") + \n  ylim(0,150) +\n  labs(fill = \"Survived\")\n\n# See about a combo of Pclass and Title\nggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +\n  geom_bar() +\n  ggtitle(\"Pclass, Title\") +\n  facet_wrap(~Pclass + Title) +\n  xlab(\"ticket.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0, 200) + \n  labs( fill = \"Survived\")\n\n# Did it myself and got it right before looking at example :)\n\n# Next up - fares passengers paid\nsummary(data.combined$Fare)\nlength(unique(data.combined$Fare))\n\n# Can't make fare a factor (too large), treat as numeric and viz with histogram\nggplot(data.combined, aes(x = Fare)) +\n  geom_histogram(binwidth = 5) +\n  ggtitle(\"Combined Fare Distribution\") +\n  xlab(\"Fare\") +\n  ylab(\"Total Count\") +\n  ylim(0,200)\n\n# Let's see of Fare as predictive power\nggplot(data.combined[1:891,], aes(x = Fare, fill = Survived)) +\n  geom_histogram(binwidth = 5) +\n  facet_wrap(~Pclass + Title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"Fare\") +\n  ylab(\"Total Count\") +\n  ylim(0,50) +\n  labs(fill = \"Survived\")\n\n# Analysis of cabin varible\nstr(data.combined$Cabin)\n\n# Cabin is not a factor, make a string and display first 100\ndata.combined$Cabin <- as.character(data.combined$Cabin)\ndata.combined$Cabin[1:100]\n\n# Replace empty cabins with a \"U\"\ndata.combined[which(data.combined$Cabin == \"\"), \"Cabin\"] <- \"U\"\ndata.combined$Cabin[1:100]\n\n# Take a look at Cabin first letter as a factor\ncabin.first.char <- as.factor(substr(data.combined$Cabin,1,1))\nstr(cabin.first.char)\nlevels(cabin.first.char)\n\n# Add to combined data set and plot\ndata.combined$cabin.first.char <- cabin.first.char\n\n# Hi lvl plot\nggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +\n  geom_bar() +\n  ggtitle(\"Survivability by cabin.first.char\") +\n  xlab(\"cabin.first.char\") +\n  ylab(\"Total Count\") + \n  ylim(0,750) +\n  labs(fill = \"Survived\")\n\n\n# Could have some predictive power, drill in\nggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass) +\n  ggtitle(\"Survivability by cabin.first.char\") +\n  xlab(\"Pclass\") +\n  ylab(\"Total Count\") +\n  ylim(0,500) +\n  labs(fill = \"Survived\")\n\n# Does this feature improve upon pclass + title?\nggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass + Title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"cabin.first.char\") +\n  ylab(\"Total Count\") +\n  ylim(0,500) +\n  labs(fill = \"Survived\")\n\n# What about folks with multiple cabins?\ndata.combined$cabin.multiple <- as.factor(ifelse(str_detect(data.combined$Cabin, \" \"), \"Y\", \"N\"))\n\nggplot(data.combined[1:891,], aes(x = cabin.multiple, fill = Survived)) +\n  geom_bar() +\n  facet_wrap(~Pclass + Title) +\n  ggtitle(\"Pclass, Title\") +\n  xlab(\"cabin.multiple\") +\n  ylab('Total Count') +\n  ylim(0,350)\n  labs(fill = \"Survived\")\n  \n# Does survivability depend on where you boarded the Titanic?\nstr(data.combined$PassengerId)  \nstr(data.combined$Embarked)\nlevels(data.combined$Embarked)\n\n# Plot data for analysis\nggplot(data.combined[1:891,], aes(x = Embarked, fill = Survived)) +\n  geom_bar() + \n  facet_wrap(~Pclass + Title) +\n  ggtitle(\"Pclass, Title\")\n  xlab(\"Embarked\") +\n  ylab(\"Total Count\") +\n  ylim(0,300) +\n  labs(fill = \"Survived\")\n  \n  #==============================================================================\n  #\n  # Video #4 - Exploratory Modeling\n  #\n  #============================================================================== \n  \n  \n  library(randomForest)\n  \n  # Train a Random Forest with the default parameters using pclass & title\n  rf.train.1 <- data.combined[1:891, c(\"pclass\", \"title\")]\n  rf.label <- as.factor(train$survived)\n  \n  set.seed(1234)\n  rf.1 <- randomForest(x = rf.train.1, y = rf.label, importance = TRUE, ntree = 1000)\n  rf.1\n  varImpPlot(rf.1)\n  \n  #Hi I really hope Git syncs with RStudio this time :)",
    "created" : 1478685065656.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2704497512",
    "id" : "1CEF5CF",
    "lastKnownWriteTime" : 1478681871,
    "last_content_update" : 1478681871,
    "path" : "~/Desktop/Tres semanas/kaggle/titanic/First Data Set.R",
    "project_path" : "First Data Set.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}